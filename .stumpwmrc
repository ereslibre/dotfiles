;; -*- Mode: Lisp -*-

(in-package :stumpwm)

;; Include nice fonts

(load-module "ttf-fonts")
(set-font (list (make-instance 'xft:font :family "mononoki" :subfamily "Regular" :size 20)
                (make-instance 'xft:font :family "FontAwesome" :subfamily "Regular" :size 20)))

;; Do some initializations

(run-shell-command "xrdb -merge ~/.Xresources")
(run-shell-command "feh --bg-scale ~/.wallpapers/2.jpg")
(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command "xmodmap ~/.Xmodmap")
(run-shell-command "xscreensaver -no-splash")
(run-shell-command "/usr/lib/gnome-settings-daemon/gnome-settings-daemon &")

;; Modeline

(defun set-keyboard-layout (layout)
  (setf *keyboard-layout* layout)
  (run-shell-command (concat "setxkbmap " layout)))
(set-keyboard-layout "en_US")
(defcommand rr-keyboard-layout () ()
  (if (string-equal *keyboard-layout* "es")
      (set-keyboard-layout "en_US")
      (set-keyboard-layout "es")))

(defun set-brightness (brightness)
  (setf *brightness* brightness)
  (run-shell-command (concat "sudo su -c 'echo " brightness " > /sys/class/backlight/intel_backlight/brightness'")))
(set-brightness "10")

(defcommand raise-brightness () ()
  (setf new-brightness (+ (parse-integer *brightness*) 10))
  (set-brightness (write-to-string new-brightness)))

(defcommand lower-brightness () ()
  (setf new-brightness (- (parse-integer *brightness*) 10))
  (set-brightness (write-to-string new-brightness)))

(setf *muted* (run-shell-command "pactl list sinks | grep Mute | awk '{print $2}' | tr -d '\\r\\n'" t))
(setf *volume* (run-shell-command "pactl list sinks | grep -i volume | head -n1 | awk '{print $5}' | tr -d '\\r\\n'" t))
(defun volume-info ()
  (if (string-equal *muted* "yes")
    (concat "~" *volume*)
    *volume*))

(defcommand raise-volume () ()
  (run-shell-command "pactl set-sink-volume 0 +5%")
  (setf *volume* (run-shell-command "pactl list sinks | grep -i volume | head -n1 | awk '{print $5}' | tr -d '\\r\\n'" t))
  nil)

(defcommand lower-volume () ()
  (run-shell-command "pactl set-sink-volume 0 -5%")
  (setf *volume* (run-shell-command "pactl list sinks | grep -i volume | head -n1 | awk '{print $5}' | tr -d '\\r\\n'" t))
  nil)

(defcommand toggle-mute () ()
  (run-shell-command "pactl set-sink-mute 0 toggle")
  (setf *muted* (run-shell-command "pactl list sinks | grep Mute | awk '{print $2}' | tr -d '\\r\\n'" t))
  nil)

(defun battery-status ()
  (run-shell-command "cat /sys/class/power_supply/BAT0/status | tr -d '\\r\\n'" t))

(defun battery-capacity ()
  (run-shell-command "cat /sys/class/power_supply/BAT0/capacity | tr -d '\\r\\n'" t))

(setf *startup-message* nil)
(setf *mode-line-timeout* 60)
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

(setf *message-window-padding* 5)

(set-focus-color   "lightskyblue4")
(set-unfocus-color "gray6")
(set-win-bg-color  "gray8")

(set-fg-color "oldlace")
(set-bg-color "gray8")
(set-border-color "oldlace")

(setf *time-modeline-string* "^f1^f0 %a, %e %b | ^f1^f0 %H:%M")

(setf *mode-line-foreground-color* "white"
      *mode-line-background-color* "black"
      *mode-line-border-color*     "oldlace"
      *mode-line-position*         :bottom)

(mode-line) (mode-line)

(setf *screen-mode-line-format*
      (list "^B[ %n ]^b [ %W ]"
            "^>"
            "^7*"
            "^f1^f0 " '(:eval *keyboard-layout*) " | "
            "^f1^f0 " '(:eval (volume-info)) " | "
            "^f1^f0 " '(:eval *brightness*) " | "
            "^f1^f0 " '(:eval (battery-status)) " "
                        '(:eval (battery-capacity)) "% | "
            "%d"
            ))

;; Defaults

(setf *group-format* "%s [%n] %t ")
(setf *window-format* "%m%n%s%c")
(setf *message-window-gravity* :top-right)
(setf *input-window-gravity* :top-right)
(setf *ignore-wm-inc-hints* t)
(setf *window-border-style* :thin)
(setf *timeout-wait* 5)
(setf *mouse-focus-policy* :click)

;; Shortcuts

(define-key *top-map* (kbd "C-Q") "quit")
(define-key *top-map* (kbd "C-Return") "exec terminator")

(define-key *top-map* (kbd "M-n") "pull-hidden-next")
(define-key *top-map* (kbd "M-p") "pull-hidden-previous")
(define-key *top-map* (kbd "M-N") "gnext")
(define-key *top-map* (kbd "M-P") "gprev")

(define-key *top-map* (kbd "M-z") "rr-keyboard-layout")

(define-key *root-map* (kbd "M-l") "exec xscreensaver-command --lock")

(define-key *root-map* (kbd "c") "exec terminator")
(define-key *root-map* (kbd "C-c") "exec terminator")

(define-key *root-map* (kbd "e") "exec GDK_SCALE=1 GDK_DPI_SCALE=1 emacs")
(define-key *root-map* (kbd "C-e") "exec GDK_SCALE=1 GDK_DPI_SCALE=1 emacs")

(define-key *root-map* (kbd "M-m") "exec geary")
(define-key *root-map* (kbd "M-c") "exec chromium")
(define-key *root-map* (kbd "M-g") "exec nautilus")
(define-key *root-map* (kbd "M-q") "exec quasselclient")
(define-key *root-map* (kbd "M-i") "exec telegram-desktop")

(define-key *root-map* (kbd "C-n") "move-focus down")
(define-key *root-map* (kbd "C-p") "move-focus up")
(define-key *root-map* (kbd "C-f") "move-focus right")
(define-key *root-map* (kbd "C-b") "move-focus left")

(define-key *root-map* (kbd "M-p") "move-window up")
(define-key *root-map* (kbd "M-b") "move-window left")
(define-key *root-map* (kbd "M-n") "move-window down")
(define-key *root-map* (kbd "M-f") "move-window right")

;; Create default groups

(run-commands "grename code" "gnewbg www" "gnewbg im" "gnewbg mail" "gnewbg media")

;; Deal with special keys

(define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")
(define-key *top-map* (kbd "XF86MonBrightnessUp") "raise-brightness")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "lower-brightness")

;; Give priority to ~/bin when calling to StumpWM's exec

(setf (getenv "PATH") (concat "~/bin:" (getenv "PATH")))

;; Add commands

(defcommand wp (search)
  ((:string "Search in Wikipedia for: "))
  "docstring"
  (check-type search string)
  (run-or-raise
     (concat "chromium https://en.wikipedia.org/wiki/Special:Search?search=" (substitute #\+ #\Space search))
     '(:class "Wikipedia")))

(defcommand gg (search)
  ((:string "Search in Google for: "))
  "docstring"
  (check-type search string)
  (run-or-raise
     (concat "chromium https://www.google.com/search?q=" (substitute #\+ #\Space search))
     '(:class "Google")))
